@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

@prefix : <https://aphia.org/ns/taxon-name/> .
@prefix top-level: <https://aphia.org/ns/top-level/> .
@prefix media: <https://aphia.org/ns/media/> .
@prefix dist: <https://aphia.org/ns/distribution/> .

#### NodeShapes ####
### Shape for Rank
:RankShape a sh:NodeShape ;
    sh:targetClass :Rank ;
.

### Shape for Status
:StatusShape a sh:NodeShape ;
    sh:targetClass :Status ;
.

### Shape for Taxon
:TaxonShape a sh:NodeShape ;
    sh:targetClass :Taxon ;
    sh:property [
        sh:path :isDenotedBy ;
        sh:class top-level:Name ;
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path dct:source ;
        sh:class top-level:Source ;
    ] ;
    sh:property [
        sh:path :hasChild ;
        sh:class :Taxon ;
    ] ;
    sh:property [
        sh:path :hasParent ;
        sh:class :Taxon ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path :hasAcceptedName ;
        sh:class :TaxonName ;
    ] ;
    sh:property [
        sh:path :hasSynonymName ;
        sh:class :TaxonName ;
    ] ;
    sh:property [
        sh:path media:isSubjectOf ;
        sh:class media:MediaObject ;
    ] ;
    sh:property [
        sh:path dist:hasDistribution ;
        sh:class dist:Distribution ;
    ] ;
.

### Shape for TaxonName
:TaxonNameShape a sh:NodeShape ;
    sh:targetClass :TaxonName ;
    sh:property [
        sh:path dct:source ;
        sh:class top-level:Source ;
    ] ;
    sh:property [
        sh:path :hasSynonym ;
        sh:class :TaxonName ;
    ] ;
    sh:property [
        sh:path :isSynonymOf ;
        sh:class :TaxonName ;
    ] ;
    sh:property [
        sh:path top-level:hasIdentifier ;
        sh:class top-level:Identifier ;
    ] ;
    sh:property [
        sh:path :hasStatus ;
        sh:class :Status ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path :isOfRank ;
        sh:class :Rank ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path :hasUnacceptedReason ;
        sh:class :UnacceptedReason ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path :aphiaID ;
        sh:datatype xsd:nonNegativeInteger ;            # unsure of this
        sh:class rdf:PlainLiteral ;                     # unsure
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path :fullScientificName ;
        sh:datatype rdf:PlainLiteral ;                  # unsure, can this be specified to xsd:string?
        sh:class rdf:PlainLiteral ;                     # unsure
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path :authorship ;
        sh:datatype rdf:PlainLiteral ;                  # unsure, can this be specified to xsd:string? 
        sh:class rdf:PlainLiteral ;                     # unsure
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path :scientificName ;
        sh:datatype rdf:PlainLiteral ;                  # unsure, can this be specified to xsd:string?
        sh:class rdf:PlainLiteral ;                     # unsure
        sh:maxCount 1 ;
    ] .

### Shape for UnacceptedReason
:UnacceptedReasonShape a sh:NodeShape ;
    sh:targetClass :UnacceptedReason ;   
.

### Shape for VernacularName
:VernacularNameShape a sh:NodeShape ;
    sh:targetClass :VernacularName ;
    sh:property [
        sh:path dct:coverage ;
        sh:class dct:Location ;
    ] ;
    sh:property [
        sh:path dct:language ;
        sh:class dct:LinguisticSystem ;
    ] ;
    sh:property [
        sh:path dct:source ;
        sh:class top-level:Source ; 
    ] ;
    sh:property [
        sh:path :vernacularName ;
        sh:datatype rdf:PlainLiteral ;             # unsure about this, can't this be specified to xsd:string?
        sh:class rdf:PlainLiteral ;                # unsure
    ] .


#### DatatypePropertyShapes ####            are these needed?
### PropertyShape for aphiaID                  also specified in TaxonNameShape
:AphiaIDPropertyShape a sh:PropertyShape ;
    sh:path :aphiaID ;
    sh:datatype xsd:string ;                # unsure
    sh:class rdf:PlainLiteral ;                # unsure
.

### PropertyShape for authorship                  also specified in TaxonNameShape
:AuthorshipPropertyShape a sh:PropertyShape ;
    sh:path :authorship ;
    sh:datatype xsd:string ;                # unsure
    sh:class rdf:PlainLiteral ;                # unsure
.

### PropertyShape for fullScientificName                  also specified in TaxonNameShape
:FullScientificNamePropertyShape a sh:PropertyShape ;
    sh:path :fullScientificName ;
    sh:datatype xsd:string ;                # unsure
    sh:class rdf:PlainLiteral ;                # unsure
.

### PropertyShape for scientificName                  also specified in TaxonNameShape
:ScientificNamePropertyShape a sh:PropertyShape ;
    sh:path :scientificName ;
    sh:datatype xsd:string ;                # unsure
    sh:class rdf:PlainLiteral ;                # unsure
.

### PropertyShape for vernacularName                  also specified in VernacularNameShape
:VernacularNamePropertyShape a sh:PropertyShape ;
    sh:path :vernacularName ;
    sh:datatype xsd:string ;                # unsure
    sh:class rdf:PlainLiteral ;                # unsure
.



#### ObjectPropertyShapes ####              are this needed?
### PropertyShape for denotes               # also specified top-level:NameShape
:DenotesPropertyShape a sh:PropertyShape ;
    sh:path :denotes ;
    sh:class :Taxon ;
.

### PropertyShape for hasAcceptedName       also specified in TaxonShape
:HasAcceptedNamePropertyShape a sh:PropertyShape ;
    sh:path :hasAcceptedName ;
    sh:class :TaxonName ;
.

### PropertyShape for hasChild       also specified in TaxonShape
:HasChildPropertyShape a sh:PropertyShape ;
    sh:path :hasChild ;
    sh:class :Taxon ;
.

### PropertyShape for hasParent       also specified in TaxonShape
:HasParentPropertyShape a sh:PropertyShape ;
    sh:path :hasParent ;
    sh:class :Taxon ;
.

### PropertyShape for hasStatus       also specified in TaxonNameShape
:HasStatusPropertyShape a sh:PropertyShape ;
    sh:path :hasStatus ;
    sh:class :Status ;
.

### PropertyShape for hasSynonym       also specified in TaxonNameShape
:HasSynonymPropertyShape a sh:PropertyShape ;
    sh:path :hasSynonym ;
    sh:class :TaxonName ;
.

### PropertyShape for hasSynonymName       also specified in TaxonShape
:HasSynonymNamePropertyShape a sh:PropertyShape ;
    sh:path :hasSynonymName ;
    sh:class :TaxonName ;
.

### PropertyShape for hasUnacceptedReason       also specified in TaxonNameShape
:HasUnacceptedReasonPropertyShape a sh:PropertyShape ;
    sh:path :hasUnacceptedReason ;
    sh:class :UnacceptedReason ;
.

### PropertyShape for isDenotedBy       also specified in TaxonShape
:IsDenotedByPropertyShape a sh:PropertyShape ;
    sh:path :isDenotedBy ;
    sh:class top-level:Name ;
.

### PropertyShape for isOfRank       also specified in TaxonNameShape
:IsOfRankPropertyShape a sh:PropertyShape ;
    sh:path :isOfRank ;
    sh:class :Rank ;
.

### PropertyShape for isSynonymOf       also specified in TaxonNameShape
:IsSynonymOfPropertyShape a sh:PropertyShape ;
    sh:path :isSynonymOf ;
    sh:class :TaxonName ;
.