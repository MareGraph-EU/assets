@prefix : <https://aphia.org/ns/top-level/> .
@prefix taxon-name: <https://aphia.org/ns/taxon-name/> .

@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

#### NodeShapes ####
### Shape for Identifier
:IdentifierShape a sh:NodeShape ;
    sh:targetClass :Identifier ;
    
    sh:property [
        sh:path :hasType ;
        sh:class :IdentifierType ;
    ] ;
    sh:property [
        sh:path :isAssignedBy ;
        sh:class :System ;
    ] ;
    sh:property [
        sh:path dct:identifier ;
        sh:class rdfs:Literal ;
        sh:minCount 1 ;
    ] ;
.

### Shape for IdentifierType
:IdentifierTypeShape a sh:NodeShape ;
    sh:targetClass :IdentifierType ;

    ## IdentifierType subClassOf Identifier (Q: need property restrictions be repeated?)
    ## Type doesn't have specific restrictions
.

### Shape for Name
:NameShape a sh:NodeShape ;
    sh:targetClass :Name ;

    sh:property [
        sh:path dct:relation ;
        sh:class :Name ;
    ] ;
    sh:property [
        sh:path :name ;
        sh:class rdfs:Literal ;
        sh:minCount 1 ;
    ] ;
.

### Shape for Person
:PersonShape a sh:NodeShape ;
    sh:targetClass :Person ;
.

### Shape for Source
:SourceShape a sh:NodeShape ;
    sh:targetClass :Source ;
.

### Shape for System
:SystemShape a sh:NodeShape ;
    sh:targetClass :System ;
    sh:property [
        sh:path dct:title ;
        sh:class rdfs:Literal ;
        sh:minCount 1 ;
    ] ;
.

### Shape for Type
:TypeShape a sh:NodeShape ;
    sh:targetClass :Type ;
.

### Shape for UnitOfMeasure
:UnitOfMeasureShape a sh:NodeShape ;
    sh:targetClass :UnitOfMeasure ;
.

### Shape for Value
:ValueShape a sh:NodeShape ;
    sh:targetClass :Value ;
    sh:property [
        sh:path :hasUnitOfMeasure ;
        sh:class :UnitOfMeasure ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path :value ;
        sh:datatype xsd:anySimpleType ;     # unsure about this, don't know if/which sh:class to specify?
        sh:class rdfs:Literal ;             # unsure
        sh:minCount 1 ;
        sh:maxCount 1 ;
    ] ;
.



#### DatatypePropertyShapes ####            are these needed?
### PropertyShape for name                  also specified in NameShape
:NamePropertyShape a sh:PropertyShape ;
    sh:path :name ;
    sh:datatype xsd:string ;                # unsure
.

### PropertyShape for value
:ValuePropertyShape a sh:PropertyShape ;
    sh:path :value ;
    sh:datatype xsd:integer ;                 # unsure 
.

### PropertyShape for year
:YearPropertyShape a sh:PropertyShape ;
    sh:path :year ;
    sh:datatype xsd:gYear ;                # unsure
.



#### ObjectPropertyShapes ####              are this needed?
### PropertyShape for hasIdentifier
:HasIdentifierShape
    a sh:PropertyShape ;
    sh:path :hasIdentifier ;
    sh:class :Identifier ;
.

### PropertyShape for hasType
:HasTypeShape
    a sh:PropertyShape ;
    sh:path :hasType ;
    sh:class :Type ;
.

### PropertyShape for hasUnitOfMeasure      also specified in ValueShape
:HasTypeShape
    a sh:PropertyShape ;
    sh:path :hasUnitOfMeasure ;
    sh:class :UnitOfMeasure ;
.

### PropertyShape for hasValue
:HasValueShape
    a sh:PropertyShape ;
    sh:path :hasValue ;
    sh:class :Value ;
.

### PropertyShape for isAssignedBy      also specified in IdentifierShape
:IsAssignedByShape
    a sh:PropertyShape ;
    sh:path :isAssignedBy ;
    sh:class :System ;
.